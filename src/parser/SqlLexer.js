// Generated from Sql.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';


const serializedATN = [4,0,41,356,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,
4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,
12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,
2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,
27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,
7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,
41,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,
7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,
9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,14,1,14,1,
14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,
1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,
18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,
1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,
22,1,22,1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,
1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,28,1,
28,1,28,1,29,1,29,1,29,1,29,1,29,1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,
1,30,1,30,1,30,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,31,1,32,1,32,1,
33,1,33,1,34,1,34,1,35,4,35,290,8,35,11,35,12,35,291,1,35,1,35,1,36,1,36,
1,36,1,36,1,36,5,36,301,8,36,10,36,12,36,304,9,36,1,36,1,36,1,36,1,36,5,
36,310,8,36,10,36,12,36,313,9,36,1,36,3,36,316,8,36,1,37,3,37,319,8,37,1,
38,4,38,322,8,38,11,38,12,38,323,1,39,4,39,327,8,39,11,39,12,39,328,1,39,
1,39,4,39,333,8,39,11,39,12,39,334,3,39,337,8,39,1,40,1,40,5,40,341,8,40,
10,40,12,40,344,9,40,1,41,1,41,1,41,1,41,5,41,350,8,41,10,41,12,41,353,9,
41,1,41,1,41,2,302,311,0,42,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,
21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,
45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,
69,35,71,36,73,37,75,0,77,38,79,39,81,40,83,41,1,0,7,3,0,9,10,13,13,32,32,
2,0,34,34,39,39,21,0,0,33,35,38,40,126,8212,8212,8216,8217,8220,8221,8230,
8230,12289,12290,12296,12305,12308,12309,19968,40869,65091,65092,65103,65103,
65281,65281,65288,65289,65292,65293,65306,65307,65311,65311,65343,65343,
65374,65374,65509,65509,1,0,48,57,3,0,65,90,95,95,97,122,4,0,48,57,65,90,
95,95,97,122,2,0,10,10,13,13,367,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,
1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,
0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,
0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,
41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,
1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,1,85,1,0,0,0,3,87,1,
0,0,0,5,89,1,0,0,0,7,91,1,0,0,0,9,93,1,0,0,0,11,95,1,0,0,0,13,104,1,0,0,
0,15,113,1,0,0,0,17,128,1,0,0,0,19,136,1,0,0,0,21,144,1,0,0,0,23,151,1,0,
0,0,25,158,1,0,0,0,27,162,1,0,0,0,29,166,1,0,0,0,31,172,1,0,0,0,33,178,1,
0,0,0,35,186,1,0,0,0,37,194,1,0,0,0,39,202,1,0,0,0,41,210,1,0,0,0,43,217,
1,0,0,0,45,224,1,0,0,0,47,230,1,0,0,0,49,236,1,0,0,0,51,239,1,0,0,0,53,242,
1,0,0,0,55,246,1,0,0,0,57,250,1,0,0,0,59,257,1,0,0,0,61,264,1,0,0,0,63,273,
1,0,0,0,65,282,1,0,0,0,67,284,1,0,0,0,69,286,1,0,0,0,71,289,1,0,0,0,73,315,
1,0,0,0,75,318,1,0,0,0,77,321,1,0,0,0,79,326,1,0,0,0,81,338,1,0,0,0,83,345,
1,0,0,0,85,86,5,96,0,0,86,2,1,0,0,0,87,88,5,39,0,0,88,4,1,0,0,0,89,90,5,
40,0,0,90,6,1,0,0,0,91,92,5,44,0,0,92,8,1,0,0,0,93,94,5,41,0,0,94,10,1,0,
0,0,95,96,5,117,0,0,96,97,5,110,0,0,97,98,5,115,0,0,98,99,5,105,0,0,99,100,
5,103,0,0,100,101,5,110,0,0,101,102,5,101,0,0,102,103,5,100,0,0,103,12,1,
0,0,0,104,105,5,85,0,0,105,106,5,78,0,0,106,107,5,83,0,0,107,108,5,73,0,
0,108,109,5,71,0,0,109,110,5,78,0,0,110,111,5,69,0,0,111,112,5,68,0,0,112,
14,1,0,0,0,113,114,5,65,0,0,114,115,5,85,0,0,115,116,5,84,0,0,116,117,5,
79,0,0,117,118,5,95,0,0,118,119,5,73,0,0,119,120,5,78,0,0,120,121,5,67,0,
0,121,122,5,82,0,0,122,123,5,69,0,0,123,124,5,77,0,0,124,125,5,69,0,0,125,
126,5,78,0,0,126,127,5,84,0,0,127,16,1,0,0,0,128,129,5,80,0,0,129,130,5,
82,0,0,130,131,5,73,0,0,131,132,5,77,0,0,132,133,5,65,0,0,133,134,5,82,0,
0,134,135,5,89,0,0,135,18,1,0,0,0,136,137,5,112,0,0,137,138,5,114,0,0,138,
139,5,105,0,0,139,140,5,109,0,0,140,141,5,97,0,0,141,142,5,114,0,0,142,143,
5,121,0,0,143,20,1,0,0,0,144,145,5,85,0,0,145,146,5,78,0,0,146,147,5,73,
0,0,147,148,5,81,0,0,148,149,5,85,0,0,149,150,5,69,0,0,150,22,1,0,0,0,151,
152,5,117,0,0,152,153,5,110,0,0,153,154,5,105,0,0,154,155,5,113,0,0,155,
156,5,117,0,0,156,157,5,101,0,0,157,24,1,0,0,0,158,159,5,107,0,0,159,160,
5,101,0,0,160,161,5,121,0,0,161,26,1,0,0,0,162,163,5,75,0,0,163,164,5,69,
0,0,164,165,5,89,0,0,165,28,1,0,0,0,166,167,5,105,0,0,167,168,5,110,0,0,
168,169,5,100,0,0,169,170,5,101,0,0,170,171,5,120,0,0,171,30,1,0,0,0,172,
173,5,73,0,0,173,174,5,78,0,0,174,175,5,68,0,0,175,176,5,69,0,0,176,177,
5,88,0,0,177,32,1,0,0,0,178,179,5,100,0,0,179,180,5,101,0,0,180,181,5,102,
0,0,181,182,5,97,0,0,182,183,5,117,0,0,183,184,5,108,0,0,184,185,5,116,0,
0,185,34,1,0,0,0,186,187,5,68,0,0,187,188,5,69,0,0,188,189,5,70,0,0,189,
190,5,65,0,0,190,191,5,85,0,0,191,192,5,76,0,0,192,193,5,84,0,0,193,36,1,
0,0,0,194,195,5,67,0,0,195,196,5,79,0,0,196,197,5,77,0,0,197,198,5,77,0,
0,198,199,5,69,0,0,199,200,5,78,0,0,200,201,5,84,0,0,201,38,1,0,0,0,202,
203,5,99,0,0,203,204,5,111,0,0,204,205,5,109,0,0,205,206,5,109,0,0,206,207,
5,101,0,0,207,208,5,110,0,0,208,209,5,116,0,0,209,40,1,0,0,0,210,211,5,99,
0,0,211,212,5,114,0,0,212,213,5,101,0,0,213,214,5,97,0,0,214,215,5,116,0,
0,215,216,5,101,0,0,216,42,1,0,0,0,217,218,5,67,0,0,218,219,5,82,0,0,219,
220,5,69,0,0,220,221,5,65,0,0,221,222,5,84,0,0,222,223,5,69,0,0,223,44,1,
0,0,0,224,225,5,116,0,0,225,226,5,97,0,0,226,227,5,98,0,0,227,228,5,108,
0,0,228,229,5,101,0,0,229,46,1,0,0,0,230,231,5,84,0,0,231,232,5,65,0,0,232,
233,5,66,0,0,233,234,5,76,0,0,234,235,5,69,0,0,235,48,1,0,0,0,236,237,5,
105,0,0,237,238,5,102,0,0,238,50,1,0,0,0,239,240,5,73,0,0,240,241,5,70,0,
0,241,52,1,0,0,0,242,243,5,110,0,0,243,244,5,111,0,0,244,245,5,116,0,0,245,
54,1,0,0,0,246,247,5,78,0,0,247,248,5,79,0,0,248,249,5,84,0,0,249,56,1,0,
0,0,250,251,5,101,0,0,251,252,5,120,0,0,252,253,5,105,0,0,253,254,5,115,
0,0,254,255,5,116,0,0,255,256,5,115,0,0,256,58,1,0,0,0,257,258,5,69,0,0,
258,259,5,88,0,0,259,260,5,73,0,0,260,261,5,83,0,0,261,262,5,84,0,0,262,
263,5,83,0,0,263,60,1,0,0,0,264,265,5,100,0,0,265,266,5,97,0,0,266,267,5,
116,0,0,267,268,5,97,0,0,268,269,5,98,0,0,269,270,5,97,0,0,270,271,5,115,
0,0,271,272,5,101,0,0,272,62,1,0,0,0,273,274,5,68,0,0,274,275,5,65,0,0,275,
276,5,84,0,0,276,277,5,65,0,0,277,278,5,66,0,0,278,279,5,65,0,0,279,280,
5,83,0,0,280,281,5,69,0,0,281,64,1,0,0,0,282,283,5,46,0,0,283,66,1,0,0,0,
284,285,5,59,0,0,285,68,1,0,0,0,286,287,5,61,0,0,287,70,1,0,0,0,288,290,
7,0,0,0,289,288,1,0,0,0,290,291,1,0,0,0,291,289,1,0,0,0,291,292,1,0,0,0,
292,293,1,0,0,0,293,294,6,35,0,0,294,72,1,0,0,0,295,302,5,34,0,0,296,301,
3,75,37,0,297,301,5,39,0,0,298,299,5,92,0,0,299,301,5,34,0,0,300,296,1,0,
0,0,300,297,1,0,0,0,300,298,1,0,0,0,301,304,1,0,0,0,302,303,1,0,0,0,302,
300,1,0,0,0,303,305,1,0,0,0,304,302,1,0,0,0,305,316,5,34,0,0,306,311,5,39,
0,0,307,310,3,75,37,0,308,310,7,1,0,0,309,307,1,0,0,0,309,308,1,0,0,0,310,
313,1,0,0,0,311,312,1,0,0,0,311,309,1,0,0,0,312,314,1,0,0,0,313,311,1,0,
0,0,314,316,5,39,0,0,315,295,1,0,0,0,315,306,1,0,0,0,316,74,1,0,0,0,317,
319,7,2,0,0,318,317,1,0,0,0,319,76,1,0,0,0,320,322,7,3,0,0,321,320,1,0,0,
0,322,323,1,0,0,0,323,321,1,0,0,0,323,324,1,0,0,0,324,78,1,0,0,0,325,327,
7,3,0,0,326,325,1,0,0,0,327,328,1,0,0,0,328,326,1,0,0,0,328,329,1,0,0,0,
329,336,1,0,0,0,330,332,5,46,0,0,331,333,7,3,0,0,332,331,1,0,0,0,333,334,
1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,337,1,0,0,0,336,330,1,0,0,0,
336,337,1,0,0,0,337,80,1,0,0,0,338,342,7,4,0,0,339,341,7,5,0,0,340,339,1,
0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,82,1,0,0,0,344,
342,1,0,0,0,345,346,5,45,0,0,346,347,5,45,0,0,347,351,1,0,0,0,348,350,8,
6,0,0,349,348,1,0,0,0,350,353,1,0,0,0,351,349,1,0,0,0,351,352,1,0,0,0,352,
354,1,0,0,0,353,351,1,0,0,0,354,355,6,41,0,0,355,84,1,0,0,0,14,0,291,300,
302,309,311,315,318,323,328,334,336,342,351,1,6,0,0];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

export default class SqlLexer extends antlr4.Lexer {

    static grammarFileName = "Sql.g4";
    static channelNames = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	static modeNames = [ "DEFAULT_MODE" ];
	static literalNames = [ null, "'`'", "'''", "'('", "','", "')'", "'unsigned'", 
                         "'UNSIGNED'", "'AUTO_INCREMENT'", "'PRIMARY'", 
                         "'primary'", "'UNIQUE'", "'unique'", "'key'", "'KEY'", 
                         "'index'", "'INDEX'", "'default'", "'DEFAULT'", 
                         "'COMMENT'", "'comment'", "'create'", "'CREATE'", 
                         "'table'", "'TABLE'", "'if'", "'IF'", "'not'", 
                         "'NOT'", "'exists'", "'EXISTS'", "'database'", 
                         "'DATABASE'", "'.'", "';'", "'='" ];
	static symbolicNames = [ null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, null, null, null, null, 
                          null, null, null, null, "SPACE", "STRING", "INT", 
                          "Float", "ID", "CommentLine" ];
	static ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                      "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", 
                      "T__13", "T__14", "T__15", "T__16", "T__17", "T__18", 
                      "T__19", "T__20", "T__21", "T__22", "T__23", "T__24", 
                      "T__25", "T__26", "T__27", "T__28", "T__29", "T__30", 
                      "T__31", "T__32", "T__33", "T__34", "SPACE", "STRING", 
                      "SAFECODEPOINT", "INT", "Float", "ID", "CommentLine" ];

    constructor(input) {
        super(input)
        this._interp = new antlr4.atn.LexerATNSimulator(this, atn, decisionsToDFA, new antlr4.atn.PredictionContextCache());
    }
}

SqlLexer.EOF = antlr4.Token.EOF;
SqlLexer.T__0 = 1;
SqlLexer.T__1 = 2;
SqlLexer.T__2 = 3;
SqlLexer.T__3 = 4;
SqlLexer.T__4 = 5;
SqlLexer.T__5 = 6;
SqlLexer.T__6 = 7;
SqlLexer.T__7 = 8;
SqlLexer.T__8 = 9;
SqlLexer.T__9 = 10;
SqlLexer.T__10 = 11;
SqlLexer.T__11 = 12;
SqlLexer.T__12 = 13;
SqlLexer.T__13 = 14;
SqlLexer.T__14 = 15;
SqlLexer.T__15 = 16;
SqlLexer.T__16 = 17;
SqlLexer.T__17 = 18;
SqlLexer.T__18 = 19;
SqlLexer.T__19 = 20;
SqlLexer.T__20 = 21;
SqlLexer.T__21 = 22;
SqlLexer.T__22 = 23;
SqlLexer.T__23 = 24;
SqlLexer.T__24 = 25;
SqlLexer.T__25 = 26;
SqlLexer.T__26 = 27;
SqlLexer.T__27 = 28;
SqlLexer.T__28 = 29;
SqlLexer.T__29 = 30;
SqlLexer.T__30 = 31;
SqlLexer.T__31 = 32;
SqlLexer.T__32 = 33;
SqlLexer.T__33 = 34;
SqlLexer.T__34 = 35;
SqlLexer.SPACE = 36;
SqlLexer.STRING = 37;
SqlLexer.INT = 38;
SqlLexer.Float = 39;
SqlLexer.ID = 40;
SqlLexer.CommentLine = 41;



